name: Update Proxy Configs

on:
  schedule:
    - cron: '0 */9 * * *' # Каждые 9 часов
  workflow_dispatch: # Ручной запуск

permissions:
  contents: write # Разрешение на запись в репозиторий

jobs:
  update-configs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up cache for pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-cache-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-cache-${{ runner.os }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, skipping pip install -r."
        fi

    - name: Create directories if they dont exist
      run: |
        mkdir -p configs
        # mkdir -p assets # Если директория assets используется

    - name: Check/Create channel_urls.txt
      run: |
        if [ ! -f channel_urls.txt ]; then
          echo "channel_urls.txt not found. Creating empty file."
          touch channel_urls.txt
        else
          echo "channel_urls.txt found."
        fi

    - name: Run config fetcher script
      id: run_script
      run: python src/config.py
      
    - name: Script execution status
      if: success() && steps.run_script.outcome == 'success'
      run: echo "Python script src/config.py executed successfully."

    - name: Setup Git user
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and push changes
      if: success() && steps.run_script.outcome == 'success'
      run: |
        # Попытка обновить локальную копию перед коммитом
        git pull --rebase origin main || echo "Pull/Rebase failed, continuing with commit attempt..."

        # Добавляем ВСЕ возможные выходные файлы из директории configs и input файл
        # Используем wildcard для .txt, .json, .yaml, .diff.txt в директории configs
        # Убедитесь, что OUTPUT_BASE в скрипте указывает на файлы внутри 'configs/'
        git add configs/*.* channel_urls.txt

        # Проверяем, есть ли изменения для коммита
        if ! git diff --staged --quiet; then
          echo "Changes detected. Committing and pushing..."
          # Можно сделать commit message более динамичным, если нужно
          git commit -m "Update proxy configs and reports"

          # Повторная попытка пуша, если первая не удалась (на случай конфликтов после pull)
          if ! git push origin HEAD:main; then
             echo "First push attempt failed, retrying after potential conflict resolution (if any)..."
             # Здесь можно добавить более сложную логику разрешения конфликтов,
             # но для простого обновления файлов часто достаточно повторной попытки
             git push origin HEAD:main
          fi

          # Используем новый синтаксис для установки output
          echo "pushed=true" >> $GITHUB_OUTPUT
          echo "Changes committed and pushed."
        else
          echo "No changes to commit."
          echo "pushed=false" >> $GITHUB_OUTPUT
        fi
